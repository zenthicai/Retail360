# -*- coding: utf-8 -*-
"""face_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JMdbIC-zH2z5cyKUCRveKfpLyeG4waiA
"""

# face_utils.py

import cv2
import os
import numpy as np

def load_known_faces(image_folder="known_faces"):
    known_encodings = []
    customer_labels = []

    for filename in os.listdir(image_folder):
        if filename.endswith(('.jpg', '.jpeg', '.png')):
            img_path = os.path.join(image_folder, filename)
            img = cv2.imread(img_path)
            if img is None:
                continue
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
            faces = face_cascade.detectMultiScale(gray, 1.3, 5)

            for (x, y, w, h) in faces:
                face = cv2.resize(gray[y:y+h, x:x+w], (100, 100))
                known_encodings.append(face)
                label = filename.split('.')[0]  # e.g., '1_Durga'
                customer_labels.append(label)
                break  # Only first face

    return known_encodings, customer_labels


def capture_face_from_webcam():
    cap = cv2.VideoCapture(0)
    face = None
    stframe = None
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        if len(faces) > 0:
            for (x, y, w, h) in faces:
                face = cv2.resize(gray[y:y+h, x:x+w], (100, 100))
                cap.release()
                return face
    cap.release()
    return None

def match_face(live_face, known_faces, labels, target_size=(100, 100)):
    try:
        # Resize the incoming face to match known face size
        resized_live_face = cv2.resize(live_face, target_size)
        
        # Convert to grayscale if known_faces are grayscale
        if known_faces[0].ndim == 2:  # (100,100)
            resized_live_face = cv2.cvtColor(resized_live_face, cv2.COLOR_RGB2GRAY)

        min_mse = float('inf')
        matched_label = None

        for i, known_face in enumerate(known_faces):
            mse = np.mean((resized_live_face - known_face) ** 2)
            if mse < min_mse:
                min_mse = mse
                matched_label = labels[i]

        return matched_label
    except Exception as e:
        print(f"Face matching error: {e}")
        return None
