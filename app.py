# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OqtUAyhzva6ozEnpNrvn3o7RkwAttLKd
"""

# app.py

import streamlit as st
import pandas as pd
import os
from gtts import gTTS
import uuid
import base64
from face_utils import load_known_faces, capture_face_from_webcam, match_face
from greet_utils import get_greeting
from offer_utils import get_customized_offer_text
from purchase_history_utils import display_purchase_history
from data_visuals import show_customer_insights

st.set_page_config(page_title="üè® AI-Driven Retail Experience System for Autonomous End-to-End Customer Journey", layout="wide")

st.markdown("""
    <style>
    .title-box {
        background-color: #dddddd;
        padding: 30px;
        border: 2px solid #6c757d;
        border-radius: 10px;
        text-align: center;
        font-size: 34px;
        font-weight: bold;
        color: #000000;
        margin-bottom: 20px;
        box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
    }
    .stRadio > div {
        flex-direction: row !important;
    }
    </style>
    <div class="title-box">
        üè® AI-Driven Retail Experience System for Autonomous End-to-End Customer Journey
    </div>
""", unsafe_allow_html=True)

st.markdown(
    """
    <style>
    .centered-title {
        text-align: center;
        font-size: 42px;
        font-weight: 800;
        color: #1f4e79;
        font-family: 'Segoe UI', sans-serif;
        margin-bottom: 0.3rem;
    }
    .centered-subtitle {
        text-align: center;
        font-size: 26px;
        font-weight: 500;
        color: #444444;
        font-family: 'Segoe UI', sans-serif;
        margin-top: 0.1rem;
        margin-bottom: 2rem;
    }
    </style>

    <h1 class="centered-title">Retail360.AI: Autonomous Retail Experience</h1>
    <h2 class="centered-subtitle">Smart Entry with Face Recognition</h2>
    """,
    unsafe_allow_html=True
    
)

st.markdown("<hr style='border: 1px solid #ddd;'>", unsafe_allow_html=True)

def render_styled_table(df):
    st.markdown("""
        <style>
            .styled-table {
                border-collapse: collapse;
                margin: 25px 0;
                font-size: 0.9em;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                width: 100%;
                border: 1px solid #ddd;
            }
            .styled-table th, .styled-table td {
                padding: 12px 15px;
                border: 1px solid #ddd;
                text-align: center;
            }
            .styled-table thead {
                background-color: #009879;
                color: #ffffff;
            }
            .styled-table tbody tr:nth-child(even) {
                background-color: #f3f3f3;
            }
        </style>
    """, unsafe_allow_html=True)

    html_table = df.to_html(index=False, classes="styled-table")
    st.markdown(html_table, unsafe_allow_html=True)

# Load known faces once
# Load known faces once
with st.spinner("üîÑ Loading face profiles..."):
    known_faces, labels = load_known_faces("known_faces")

# Button to initiate recognition
if st.button("üì∏ Capture & Recognize Face"):
    with st.spinner("üß† Matching with database..."):
        live_face = capture_face_from_webcam()
        matched_label = match_face(live_face, known_faces, labels)

        if matched_label:
            customer_id, customer_name = matched_label.split("_", 1)
            df_path = "data/Data_Model.csv"
            df = pd.read_csv(df_path)

            customer_df = df[df['customer_id'] == int(customer_id)]
            if customer_df.empty:
                st.error("‚ùå Customer ID not found in the dataset.")
            else:
                customer_row = customer_df.iloc[0]

                # Extract correct values from the matched customer
                customer_name = customer_row['first_name']
                dob = customer_row['date_of_birth']
                city = customer_row['city']

                # Generate and show personalized greeting
                greeting, city = get_greeting(customer_name, dob)
                st.markdown(" ")
                st.markdown(" ")
                st.success(greeting)

                # --- Text-to-Speech Audio Output ---
                try:
                    tts = gTTS(text=greeting, lang='en')
                    audio_filename = f"greeting_{uuid.uuid4().hex}.mp3"
                    tts.save(audio_filename)

                    with open(audio_filename, 'rb') as audio_file:
                        audio_bytes = audio_file.read()
                        b64_audio = base64.b64encode(audio_bytes).decode()

                    # Embed autoplay audio player
                    audio_html = f"""
                        <audio autoplay>
                            <source src="data:audio/mp3;base64,{b64_audio}" type="audio/mp3">
                        </audio>
                    """
                    st.markdown(audio_html, unsafe_allow_html=True)

                    os.remove(audio_filename)  # Cleanup after playback

                except Exception as e:
                    st.warning(f"üîä Text-to-speech error: {e}")

                st.markdown("---")

                st.markdown(
                    """
                    <div style='background-color: #f8f9fa; padding: 10px 30px; border-radius: 12px; border: 1px solid #ccc; margin-top: 30px;'>
                    <h3 style='text-align:center; color:#333;'> üéØ Customer Profile </h3>
                    """,
                    unsafe_allow_html=True
                )
                st.markdown(" ")
                st.markdown(" ")

                # ‚¨áÔ∏è Layout: 2 columns
                col1, col2 = st.columns(2)

                with col1:
                    image_path = f"known_faces/{matched_label}.jpg"

                    if os.path.exists(image_path):
                        with open(image_path, "rb") as f:
                            data = f.read()
                            encoded = base64.b64encode(data).decode()
                            img_html = f"""
                            <div style="text-align:center;">
                                <img src="data:image/jpeg;base64,{encoded}" 
                                    style="border-radius: 20px; width: 200px;" 
                                    alt="{customer_name}" />
                                <div style="font-size: 16px; font-weight: bold; margin-top: 5px;">{customer_name}</div>
                            </div>
                            """
                            st.markdown(img_html, unsafe_allow_html=True)
                    else:
                        st.warning("‚ö†Ô∏è Image not found.")

                with col2:                  
                    highlights = {
                        "Customer ID": customer_row["customer_id"],
                        "First Name": customer_row["first_name"],
                        "Last Name": customer_row["last_name"],
                        "Gender": customer_row["gender"],
                        "Email": customer_row["email"],
                        "Phone": customer_row["phone_number"],
                        "DOB": customer_row["date_of_birth"],
                        "Address": customer_row["address"],
                        "City": customer_row["city"],
                        "State": customer_row["state"],
                        "ZIP": customer_row["zip_code"],
                        "Country": customer_row["country"],
                        "Registered On": customer_row["registration_date"],
                        "Loyalty Tier": customer_row["loyalty_tier"]
                    }

                    # Render using native components
                    #st.subheader("üë§ Customer Profile")

                    cols = st.columns(2)
                    items = list(highlights.items())

                    for i in range(0, len(items), 2):
                        with cols[0]:
                            if i < len(items):
                                st.markdown(f"**{items[i][0]}:** {items[i][1]}")
                        with cols[1]:
                            if i + 1 < len(items):
                                st.markdown(f"**{items[i+1][0]}:** {items[i+1][1]}")

                st.markdown(" ")
                st.markdown("---")

                st.markdown(
                    """
                    <div style='background-color: #f8f9fa; padding: 10px 30px; border-radius: 12px; border: 1px solid #ccc; margin-top: 30px;'>
                    <h3 style='text-align:center; color:#333;'> üõçÔ∏è Purchase Summary </h3>
                    """,
                    unsafe_allow_html=True
                )
                st.markdown(" ")
                #st.subheader("üõçÔ∏è Purchase Summary & Personalized Experience")

                display_cols = {
                    "customer_id": "Customer ID",
                    "first_name": "First Name",
                    "last_name": "Last Name",
                    "email": "Email-id",
                    "phone_number": "Phone",
                    "date_of_birth": "DOB",
                    "purchase_date": "Purchase Date",
                    "purchase_time": "Purchase Time",
                    "product_name": "Products Purchased",
                    "brand": "Brand",
                    "category": "Category",
                    "item_count": "Quantity",
                    "total_amount": "Billing Amount",
                    "offer_type": "Offer",
                    "discount_percent": "Discount"
                }

                table_df = customer_df[list(display_cols.keys())].rename(columns=display_cols)
                render_styled_table(table_df.iloc[:,0:10])

        st.markdown(" ")        
        st.markdown("---")

        # üîç Data Visuals and Insights
        show_customer_insights(customer_df)

        offer_text = get_customized_offer_text(customer_df)

        st.markdown("---")
        st.markdown(
            """
            <div style='background-color: #f8f9fa; padding: 10px 30px; border-radius: 12px; border: 1px solid #ccc; margin-top: 30px;'>
            <h3 style='text-align:center; color:#333;'> üéØ Personalized Offer </h3>
            """,
            unsafe_allow_html=True
        )
        st.markdown(" ")
        #st.markdown("#### üéØ Personalized Offer")
        st.markdown(
            f"<div style='font-size:18px; background-color:#f0fff4; color:#155724; "
            f"border-left: 5px solid #28a745; padding: 10px;'>{offer_text}</div>",
            unsafe_allow_html=True
        )
        st.markdown(" ")
        st.markdown("---")

        #else:
          #st.error("‚ùå Face not recognized. Please register at the helpdesk.")
