# -*- coding: utf-8 -*-
"""data_visuals.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OrAw8NBOMDDxFzMyZqZb5ApeEcXHSHEQ
"""

# data_visuals.py

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

def show_customer_insights(customer_df):
    st.markdown(
        """
        <div style='background-color: #f8f9fa; padding: 10px 30px; border-radius: 12px; border: 1px solid #ccc; margin-top: 30px;'>
        <h3 style='text-align:center; color:#333;'> üìä Your Shopping Insights </h3>
        </div>
        """,
        unsafe_allow_html=True
    )

    if customer_df.empty:
        st.warning("No purchase data available.")
        return

    # Convert date column to datetime
    if 'purchase_date' in customer_df.columns:
        customer_df['purchase_date'] = pd.to_datetime(customer_df['purchase_date'], errors='coerce')

    col1, col2 = st.columns(2)

    # --- Column 1: Top Categories ---
    with col1:
        st.markdown(
            """
            <div style='background-color: #f8f9fa; padding: 10px 30px; border-radius: 12px; border: 1px solid #ccc; margin-top: 30px;'>
            <h3 style='text-align:center; color:#333;'> Top 5 Product Categories </h3>
            </div>
            """,
            unsafe_allow_html=True
        )
        try:
            if 'category' in customer_df.columns:
                top_cats = customer_df['category'].value_counts().head(5).reset_index()
                top_cats.columns = ['Category', 'Count']

                fig = px.bar(
                    top_cats,
                    x='Category',
                    y='Count',
                    color='Category',
                    text='Count'
                )
                fig.update_layout(
                    xaxis_title="Category",
                    yaxis_title="Number of Purchases",
                    showlegend=False,
                    margin=dict(l=10, r=10, t=40, b=10)
                )
                st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"Error generating top categories chart: {e}")

    # --- Column 2: Total Spend Gauge ---
    with col2:
        st.markdown(
            """
            <div style='background-color: #f8f9fa; padding: 10px 30px; border-radius: 12px; border: 1px solid #ccc; margin-top: 30px;'>
            <h3 style='text-align:center; color:#333;'> Total Spending Gauge </h3>
            </div>
            """,
            unsafe_allow_html=True
        )
        try:
            if 'total_amount' in customer_df.columns:
                st.markdown(" ")
                total_spend = customer_df['total_amount'].sum()
                max_target = round(total_spend * 1.5, -2)

                fig = go.Figure(go.Indicator(
                    mode="gauge+number",
                    value=total_spend,
                    number={'prefix': "‚Çπ"},
                    title={'text': "Total Customer Spend"},
                    gauge={
                        'axis': {'range': [0, max_target]},
                        'bar': {'color': "green"},
                        'steps': [
                            {'range': [0, max_target * 0.5], 'color': "lightgray"},
                            {'range': [max_target * 0.5, max_target], 'color': "gray"}
                        ]
                    }
                ))
                fig.update_layout(margin=dict(l=10, r=10, t=40, b=10))
                st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"Error generating spending gauge: {e}")

    # --- Summary Box ---
    total_visits = customer_df['purchase_date'].nunique() if 'purchase_date' in customer_df.columns else "N/A"
    total_spent = customer_df['total_amount'].sum() if 'total_amount' in customer_df.columns else 0
    top_brand = customer_df['brand'].mode().iloc[0] if 'brand' in customer_df.columns and not customer_df['brand'].mode().empty else "N/A"

    st.markdown(" ")
    st.markdown("---")
    st.markdown(
        """
        <div style='background-color: #f8f9fa; padding: 10px 30px; border-radius: 12px; border: 1px solid #ccc; margin-top: 30px;'>
        <h3 style='text-align:center; color:#333;'> üìå Quick Summary </h3>
        </div>
        """,
        unsafe_allow_html=True
    )
    st.markdown(" ")
    st.success(f"‚úÖ Total Visits: **{total_visits}**")
    st.info(f"üí∞ Total Spend: **‚Çπ{total_spent:.2f}**")
    st.warning(f"üè∑Ô∏è Preferred Brand: **{top_brand}**")